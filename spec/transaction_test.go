// Copyright Â© 2022 Attestant Limited.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package spec_test

import (
	"encoding/json"
	"testing"

	"github.com/attestantio/go-execution-client/spec"
	"github.com/attestantio/go-execution-client/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTransaction(t *testing.T) {
	tests := []struct {
		name  string
		input []byte
		err   string
	}{
		{
			name: "Empty",
			err:  "unexpected end of JSON input",
		},
		{
			name:  "JSONBad",
			input: []byte("[]"),
			err:   "invalid JSON: json: cannot unmarshal array into Go value of type spec.transactionTypeJSON",
		},
		{
			name:  "Type0",
			input: []byte(`{"blockHash":"0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd","blockNumber":"0xb443","from":"0xa1e4380a3b1f749673e270229993ee55f35663b4","gas":"0x5208","gasPrice":"0x2d79883d2000","hash":"0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060","input":"0x","nonce":"0x0","r":"0x88ff6cf0fefd94db46111149ae4bfc179e9b94721fffd821d38d16464b3f71d0","s":"0x45e0aff800961cfce805daef7016b9b675c137a6a41a548f7b60a3484c06a33a","to":"0x5df9b87991262f6ba471f09758cde1c0fc1de734","transactionIndex":"0x0","type":"0x0","v":"0x1c","value":"0x7a69"}`),
		},
		{
			name:  "Type1",
			input: []byte(`{"accessList":[],"blockHash":"0xb257c7e147b9dc4a5d9868522f7a7ff0949cd0a11231dd1f2ebe3f66c40982dd","blockNumber":"0xcff0c8","chainId":"0x1","from":"0x46eaadc8f2199463db26d1797131900575f0d264","gas":"0x4fd44","gasPrice":"0x5bf72b4854","hash":"0xc7d73aa9e0e43232010f7e28e4ad333be75f5df04dd1f9a30be80746dc42468b","input":"0xab9d206a0000000000000000000000000000000000000000000000000000000000cff0c80000000000000000000000008c54aa2a32a779e6f6fbea568ad85a19e0109c26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031d2054f6200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ba01a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480001f4956f47f50a910163d8bf957cf5846d573e7f87ca8c54aa2a32a779e6f6fbea568ad85a19e0109c2600000000000000000000000000000000000000000000000000000031d2054f6294b0a3d511b6ecdb17ebf877278ab030acb0a878000000000000000000000000000000000000000000002d5baff8458b92ac5f8001c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4888e6a0c2ddd26feeb64f039a2c41296fcb3f5640000000000000000000000000000000000000000000000002aea07fa399d7a0008c54aa2a32a779e6f6fbea568ad85a19e0109c2600000000000000000000000000000000000000000000000000000031d2054f620094b0a3d511b6ecdb17ebf877278ab030acb0a87801000000000000000000000000000000000000000000000002afe8dddb94ca63f28698d9d5ea99809c00426484a80be2add4e54581c02aaa39b223fe8d0a0e5c4f27ead9083c756cc288e6a0c2ddd26feeb64f039a2c41296fcb3f5640000000000000000000000000000000000000000000000002aea07fa399d7a000000000000000","nonce":"0xebea","r":"0x901ee907c0a921d816a73cac17405d6745c2354d6b046330780c9f281a995eeb","s":"0x7ccc54f6778c0cdbffed8cf9a1b96ef6b49a6c2e673d585471868ee7b7a9b355","to":"0x8698d9d5ea99809c00426484a80be2add4e54581","transactionIndex":"0x1","type":"0x1","v":"0x0","value":"0x0"}`),
		},
		{
			name:  "Type2",
			input: []byte(`{"accessList":[{"address":"0xceff51756c56ceffca006cd410b03ffc46dd3a58","storageKeys":["0x0000000000000000000000000000000000000000000000000000000000000008","0x0000000000000000000000000000000000000000000000000000000000000009","0x0000000000000000000000000000000000000000000000000000000000000007","0x000000000000000000000000000000000000000000000000000000000000000a","0x000000000000000000000000000000000000000000000000000000000000000c","0x0000000000000000000000000000000000000000000000000000000000000006"]},{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","storageKeys":["0x96693869bd9caff1b0916c4e11fe79467174d34d9d4aad910b52d5a6333d2192","0x30bd84b96629f958113934633d3bd1b64c3d259a85c57ceac65da8c5ec9bf3a7"]},{"address":"0xf424018c3d4473e014c1def44171772059f2d720","storageKeys":[]},{"address":"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599","storageKeys":["0x14ac31782b75d0b8926aa44db6f6caf09df8257632d9c607f23247258a0f6d0b","0x631603854828263717f78aebdf44701ab316ae3c9d57ea74169f98df3affd293","0x0000000000000000000000000000000000000000000000000000000000000005","0xf7c84b5d1f3a0563cd20b346c00dcaaaf749870e80d340ce8dc6213863709a60"]}],"blockHash":"0xb257c7e147b9dc4a5d9868522f7a7ff0949cd0a11231dd1f2ebe3f66c40982dd","blockNumber":"0xcff0c8","chainId":"0x1","from":"0x9ce3ce3978cbee75df235a499503d719da697ceb","gas":"0x61a80","gasPrice":"0x1b301f66ae","hash":"0x3eb2f1bc543ced1004437c75ba58f2bd03b7b3592ef96da57808e9460c18cd01","input":"0x1cff79cd000000000000000000000000f424018c3d4473e014c1def44171772059f2d720000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001042fdc7315000000000000000000000000ceff51756c56ceffca006cd410b03ffc46dd3a580000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf900000000000000000000000000000000000000000000000000000004f74ba90000000000000000000000000000000000000000000012a25c7039192ee0d8a8000000000000000000000000000000000000000001c67aff541cec1086a24edef4000000000000000000000000000000000000000000000000000000006193d9fe330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","maxFeePerGas":"0x1dd855f4d2","maxPriorityFeePerGas":"0x0","nonce":"0x8d89","r":"0x979132c4f106dfc44eb3ea9e24e654a6d73fd8f9081daa2b0576b6ec8bbe6e79","s":"0x461093462822fd309b9d20add4886fc4a76a190c97cb0779a26475cefbd81bce","to":"0xa57bd00134b2850b2a1c55860c9e9ea100fdd6cf","transactionIndex":"0x2","type":"0x2","v":"0x1","value":"0x0","yParity":"0x1"}`),
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			var res spec.Transaction
			err := json.Unmarshal(test.input, &res)
			if test.err != "" {
				require.EqualError(t, err, test.err)
			} else {
				require.NoError(t, err)
				rt, err := json.Marshal(&res)
				require.NoError(t, err)
				require.Equal(t, string(test.input), string(rt))
				require.Equal(t, string(test.input), res.String())
			}
		})
	}
}

func TestType0Funcs(t *testing.T) {
	input := []byte(`{"blockHash":"0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd","blockNumber":"0xb443","from":"0xa1e4380a3b1f749673e270229993ee55f35663b4","gas":"0x5208","gasPrice":"0x2d79883d2000","hash":"0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060","input":"0x","nonce":"0x0","r":"0x88ff6cf0fefd94db46111149ae4bfc179e9b94721fffd821d38d16464b3f71d0","s":"0x45e0aff800961cfce805daef7016b9b675c137a6a41a548f7b60a3484c06a33a","to":"0x5df9b87991262f6ba471f09758cde1c0fc1de734","transactionIndex":"0x0","type":"0x0","v":"0x1c","value":"0x7a69"}`)
	var tx spec.Transaction
	require.NoError(t, json.Unmarshal(input, &tx))

	assert.Len(t, tx.AccessList(), 0)
	assert.Equal(t, types.Hash{0x4e, 0x3a, 0x37, 0x54, 0x41, 0x1, 0x77, 0xe6, 0x93, 0x7e, 0xf1, 0xf8, 0x4b, 0xba, 0x68, 0xea, 0x13, 0x9e, 0x8d, 0x1a, 0x22, 0x58, 0xc5, 0xf8, 0x5d, 0xb9, 0xf1, 0xcd, 0x71, 0x5a, 0x1b, 0xdd}, *tx.BlockHash())
	assert.Equal(t, uint32(0xb443), *tx.BlockNumber())
	assert.Equal(t, types.Address{0xa1, 0xe4, 0x38, 0xa, 0x3b, 0x1f, 0x74, 0x96, 0x73, 0xe2, 0x70, 0x22, 0x99, 0x93, 0xee, 0x55, 0xf3, 0x56, 0x63, 0xb4}, tx.From())
	assert.Equal(t, uint32(0x5208), tx.Gas())
	assert.Equal(t, uint64(0x2d79883d2000), tx.GasPrice())
	assert.Equal(t, types.Hash{0x5c, 0x50, 0x4e, 0xd4, 0x32, 0xcb, 0x51, 0x13, 0x8b, 0xcf, 0x9, 0xaa, 0x5e, 0x8a, 0x41, 0xd, 0xd4, 0xa1, 0xe2, 0x4, 0xef, 0x84, 0xbf, 0xed, 0x1b, 0xe1, 0x6d, 0xfb, 0xa1, 0xb2, 0x20, 0x60}, tx.Hash())
	assert.Equal(t, []byte{}, tx.Input())
	assert.Equal(t, uint64(0), tx.MaxFeePerGas())
	assert.Equal(t, uint64(0), tx.MaxPriorityFeePerGas())
	assert.Equal(t, uint64(0), tx.Nonce())
	assert.Equal(t, "61965845294689009770156372156374760022787886965323743865986648153755601564112", tx.R().String())
	assert.Equal(t, "31606574786494953692291101914709926755545765281581808821704454381804773090106", tx.S().String())
	assert.Equal(t, &types.Address{0x5d, 0xf9, 0xb8, 0x79, 0x91, 0x26, 0x2f, 0x6b, 0xa4, 0x71, 0xf0, 0x97, 0x58, 0xcd, 0xe1, 0xc0, 0xfc, 0x1d, 0xe7, 0x34}, tx.To())
	assert.Equal(t, uint32(0), *tx.TransactionIndex())
	assert.Equal(t, "28", tx.V().String())
	assert.Equal(t, "31337", tx.Value().String())
}

func TestType1Funcs(t *testing.T) {
	input := []byte(`{"accessList":[],"blockHash":"0xb257c7e147b9dc4a5d9868522f7a7ff0949cd0a11231dd1f2ebe3f66c40982dd","blockNumber":"0xcff0c8","chainId":"0x1","from":"0x46eaadc8f2199463db26d1797131900575f0d264","gas":"0x4fd44","gasPrice":"0x5bf72b4854","hash":"0xc7d73aa9e0e43232010f7e28e4ad333be75f5df04dd1f9a30be80746dc42468b","input":"0xab9d206a0000000000000000000000000000000000000000000000000000000000cff0c80000000000000000000000008c54aa2a32a779e6f6fbea568ad85a19e0109c26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031d2054f6200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ba01a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480001f4956f47f50a910163d8bf957cf5846d573e7f87ca8c54aa2a32a779e6f6fbea568ad85a19e0109c2600000000000000000000000000000000000000000000000000000031d2054f6294b0a3d511b6ecdb17ebf877278ab030acb0a878000000000000000000000000000000000000000000002d5baff8458b92ac5f8001c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4888e6a0c2ddd26feeb64f039a2c41296fcb3f5640000000000000000000000000000000000000000000000002aea07fa399d7a0008c54aa2a32a779e6f6fbea568ad85a19e0109c2600000000000000000000000000000000000000000000000000000031d2054f620094b0a3d511b6ecdb17ebf877278ab030acb0a87801000000000000000000000000000000000000000000000002afe8dddb94ca63f28698d9d5ea99809c00426484a80be2add4e54581c02aaa39b223fe8d0a0e5c4f27ead9083c756cc288e6a0c2ddd26feeb64f039a2c41296fcb3f5640000000000000000000000000000000000000000000000002aea07fa399d7a000000000000000","nonce":"0xebea","r":"0x901ee907c0a921d816a73cac17405d6745c2354d6b046330780c9f281a995eeb","s":"0x7ccc54f6778c0cdbffed8cf9a1b96ef6b49a6c2e673d585471868ee7b7a9b355","to":"0x8698d9d5ea99809c00426484a80be2add4e54581","transactionIndex":"0x1","type":"0x1","v":"0x0","value":"0x0"}`)
	var tx spec.Transaction
	require.NoError(t, json.Unmarshal(input, &tx))

	assert.Len(t, tx.AccessList(), 0)
	assert.Equal(t, types.Hash{0xb2, 0x57, 0xc7, 0xe1, 0x47, 0xb9, 0xdc, 0x4a, 0x5d, 0x98, 0x68, 0x52, 0x2f, 0x7a, 0x7f, 0xf0, 0x94, 0x9c, 0xd0, 0xa1, 0x12, 0x31, 0xdd, 0x1f, 0x2e, 0xbe, 0x3f, 0x66, 0xc4, 0x9, 0x82, 0xdd}, *tx.BlockHash())
	assert.Equal(t, uint32(0xcff0c8), *tx.BlockNumber())
	assert.Equal(t, types.Address{0x46, 0xea, 0xad, 0xc8, 0xf2, 0x19, 0x94, 0x63, 0xdb, 0x26, 0xd1, 0x79, 0x71, 0x31, 0x90, 0x5, 0x75, 0xf0, 0xd2, 0x64}, tx.From())
	assert.Equal(t, uint32(0x4fd44), tx.Gas())
	assert.Equal(t, uint64(0x5bf72b4854), tx.GasPrice())
	assert.Equal(t, types.Hash{0xc7, 0xd7, 0x3a, 0xa9, 0xe0, 0xe4, 0x32, 0x32, 0x1, 0xf, 0x7e, 0x28, 0xe4, 0xad, 0x33, 0x3b, 0xe7, 0x5f, 0x5d, 0xf0, 0x4d, 0xd1, 0xf9, 0xa3, 0xb, 0xe8, 0x7, 0x46, 0xdc, 0x42, 0x46, 0x8b}, tx.Hash())
	assert.Equal(t, []byte{0xab, 0x9d, 0x20, 0x6a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcf, 0xf0, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8c, 0x54, 0xaa, 0x2a, 0x32, 0xa7, 0x79, 0xe6, 0xf6, 0xfb, 0xea, 0x56, 0x8a, 0xd8, 0x5a, 0x19, 0xe0, 0x10, 0x9c, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0xd2, 0x5, 0x4f, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xba, 0x1, 0xa0, 0xb8, 0x69, 0x91, 0xc6, 0x21, 0x8b, 0x36, 0xc1, 0xd1, 0x9d, 0x4a, 0x2e, 0x9e, 0xb0, 0xce, 0x36, 0x6, 0xeb, 0x48, 0x0, 0x1, 0xf4, 0x95, 0x6f, 0x47, 0xf5, 0xa, 0x91, 0x1, 0x63, 0xd8, 0xbf, 0x95, 0x7c, 0xf5, 0x84, 0x6d, 0x57, 0x3e, 0x7f, 0x87, 0xca, 0x8c, 0x54, 0xaa, 0x2a, 0x32, 0xa7, 0x79, 0xe6, 0xf6, 0xfb, 0xea, 0x56, 0x8a, 0xd8, 0x5a, 0x19, 0xe0, 0x10, 0x9c, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0xd2, 0x5, 0x4f, 0x62, 0x94, 0xb0, 0xa3, 0xd5, 0x11, 0xb6, 0xec, 0xdb, 0x17, 0xeb, 0xf8, 0x77, 0x27, 0x8a, 0xb0, 0x30, 0xac, 0xb0, 0xa8, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d, 0x5b, 0xaf, 0xf8, 0x45, 0x8b, 0x92, 0xac, 0x5f, 0x80, 0x1, 0xc0, 0x2a, 0xaa, 0x39, 0xb2, 0x23, 0xfe, 0x8d, 0xa, 0xe, 0x5c, 0x4f, 0x27, 0xea, 0xd9, 0x8, 0x3c, 0x75, 0x6c, 0xc2, 0x0, 0x1, 0xf4, 0xa0, 0xb8, 0x69, 0x91, 0xc6, 0x21, 0x8b, 0x36, 0xc1, 0xd1, 0x9d, 0x4a, 0x2e, 0x9e, 0xb0, 0xce, 0x36, 0x6, 0xeb, 0x48, 0x88, 0xe6, 0xa0, 0xc2, 0xdd, 0xd2, 0x6f, 0xee, 0xb6, 0x4f, 0x3, 0x9a, 0x2c, 0x41, 0x29, 0x6f, 0xcb, 0x3f, 0x56, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xae, 0xa0, 0x7f, 0xa3, 0x99, 0xd7, 0xa0, 0x0, 0x8c, 0x54, 0xaa, 0x2a, 0x32, 0xa7, 0x79, 0xe6, 0xf6, 0xfb, 0xea, 0x56, 0x8a, 0xd8, 0x5a, 0x19, 0xe0, 0x10, 0x9c, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0xd2, 0x5, 0x4f, 0x62, 0x0, 0x94, 0xb0, 0xa3, 0xd5, 0x11, 0xb6, 0xec, 0xdb, 0x17, 0xeb, 0xf8, 0x77, 0x27, 0x8a, 0xb0, 0x30, 0xac, 0xb0, 0xa8, 0x78, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xaf, 0xe8, 0xdd, 0xdb, 0x94, 0xca, 0x63, 0xf2, 0x86, 0x98, 0xd9, 0xd5, 0xea, 0x99, 0x80, 0x9c, 0x0, 0x42, 0x64, 0x84, 0xa8, 0xb, 0xe2, 0xad, 0xd4, 0xe5, 0x45, 0x81, 0xc0, 0x2a, 0xaa, 0x39, 0xb2, 0x23, 0xfe, 0x8d, 0xa, 0xe, 0x5c, 0x4f, 0x27, 0xea, 0xd9, 0x8, 0x3c, 0x75, 0x6c, 0xc2, 0x88, 0xe6, 0xa0, 0xc2, 0xdd, 0xd2, 0x6f, 0xee, 0xb6, 0x4f, 0x3, 0x9a, 0x2c, 0x41, 0x29, 0x6f, 0xcb, 0x3f, 0x56, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xae, 0xa0, 0x7f, 0xa3, 0x99, 0xd7, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, tx.Input())
	assert.Equal(t, uint64(0), tx.MaxFeePerGas())
	assert.Equal(t, uint64(0), tx.MaxPriorityFeePerGas())
	assert.Equal(t, uint64(0xebea), tx.Nonce())
	assert.Equal(t, "65187663923841677280337821597446452304205794224649565577870360209878979010283", tx.R().String())
	assert.Equal(t, "56447816416969609120224415789394741393990135506216301975271140959229269619541", tx.S().String())
	assert.Equal(t, &types.Address{0x86, 0x98, 0xd9, 0xd5, 0xea, 0x99, 0x80, 0x9c, 0x0, 0x42, 0x64, 0x84, 0xa8, 0xb, 0xe2, 0xad, 0xd4, 0xe5, 0x45, 0x81}, tx.To())
	assert.Equal(t, uint32(0x1), *tx.TransactionIndex())
	assert.Equal(t, "0", tx.V().String())
	assert.Equal(t, "0", tx.Value().String())
}

func TestType2Funcs(t *testing.T) {
	input := []byte(`{"accessList":[{"address":"0xceff51756c56ceffca006cd410b03ffc46dd3a58","storageKeys":["0x0000000000000000000000000000000000000000000000000000000000000008","0x0000000000000000000000000000000000000000000000000000000000000009","0x0000000000000000000000000000000000000000000000000000000000000007","0x000000000000000000000000000000000000000000000000000000000000000a","0x000000000000000000000000000000000000000000000000000000000000000c","0x0000000000000000000000000000000000000000000000000000000000000006"]},{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","storageKeys":["0x96693869bd9caff1b0916c4e11fe79467174d34d9d4aad910b52d5a6333d2192","0x30bd84b96629f958113934633d3bd1b64c3d259a85c57ceac65da8c5ec9bf3a7"]},{"address":"0xf424018c3d4473e014c1def44171772059f2d720","storageKeys":[]},{"address":"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599","storageKeys":["0x14ac31782b75d0b8926aa44db6f6caf09df8257632d9c607f23247258a0f6d0b","0x631603854828263717f78aebdf44701ab316ae3c9d57ea74169f98df3affd293","0x0000000000000000000000000000000000000000000000000000000000000005","0xf7c84b5d1f3a0563cd20b346c00dcaaaf749870e80d340ce8dc6213863709a60"]}],"blockHash":"0xb257c7e147b9dc4a5d9868522f7a7ff0949cd0a11231dd1f2ebe3f66c40982dd","blockNumber":"0xcff0c8","chainId":"0x1","from":"0x9ce3ce3978cbee75df235a499503d719da697ceb","gas":"0x61a80","gasPrice":"0x1b301f66ae","hash":"0x3eb2f1bc543ced1004437c75ba58f2bd03b7b3592ef96da57808e9460c18cd01","input":"0x1cff79cd000000000000000000000000f424018c3d4473e014c1def44171772059f2d720000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001042fdc7315000000000000000000000000ceff51756c56ceffca006cd410b03ffc46dd3a580000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf900000000000000000000000000000000000000000000000000000004f74ba90000000000000000000000000000000000000000000012a25c7039192ee0d8a8000000000000000000000000000000000000000001c67aff541cec1086a24edef4000000000000000000000000000000000000000000000000000000006193d9fe330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","maxFeePerGas":"0x1dd855f4d2","maxPriorityFeePerGas":"0x0","nonce":"0x8d89","r":"0x979132c4f106dfc44eb3ea9e24e654a6d73fd8f9081daa2b0576b6ec8bbe6e79","s":"0x461093462822fd309b9d20add4886fc4a76a190c97cb0779a26475cefbd81bce","to":"0xa57bd00134b2850b2a1c55860c9e9ea100fdd6cf","transactionIndex":"0x2","type":"0x2","v":"0x1","value":"0x0"}`)
	var tx spec.Transaction
	require.NoError(t, json.Unmarshal(input, &tx))

	assert.Len(t, tx.AccessList(), 4)
	assert.Equal(t, types.Hash{0xb2, 0x57, 0xc7, 0xe1, 0x47, 0xb9, 0xdc, 0x4a, 0x5d, 0x98, 0x68, 0x52, 0x2f, 0x7a, 0x7f, 0xf0, 0x94, 0x9c, 0xd0, 0xa1, 0x12, 0x31, 0xdd, 0x1f, 0x2e, 0xbe, 0x3f, 0x66, 0xc4, 0x9, 0x82, 0xdd}, *tx.BlockHash())
	assert.Equal(t, uint32(0xcff0c8), *tx.BlockNumber())
	assert.Equal(t, types.Address{0x9c, 0xe3, 0xce, 0x39, 0x78, 0xcb, 0xee, 0x75, 0xdf, 0x23, 0x5a, 0x49, 0x95, 0x3, 0xd7, 0x19, 0xda, 0x69, 0x7c, 0xeb}, tx.From())
	assert.Equal(t, uint32(0x61a80), tx.Gas())
	assert.Equal(t, uint64(0), tx.GasPrice())
	assert.Equal(t, types.Hash{0x3e, 0xb2, 0xf1, 0xbc, 0x54, 0x3c, 0xed, 0x10, 0x4, 0x43, 0x7c, 0x75, 0xba, 0x58, 0xf2, 0xbd, 0x3, 0xb7, 0xb3, 0x59, 0x2e, 0xf9, 0x6d, 0xa5, 0x78, 0x8, 0xe9, 0x46, 0xc, 0x18, 0xcd, 0x1}, tx.Hash())
	assert.Equal(t, []byte{0x1c, 0xff, 0x79, 0xcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x24, 0x1, 0x8c, 0x3d, 0x44, 0x73, 0xe0, 0x14, 0xc1, 0xde, 0xf4, 0x41, 0x71, 0x77, 0x20, 0x59, 0xf2, 0xd7, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x2f, 0xdc, 0x73, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0xff, 0x51, 0x75, 0x6c, 0x56, 0xce, 0xff, 0xca, 0x0, 0x6c, 0xd4, 0x10, 0xb0, 0x3f, 0xfc, 0x46, 0xdd, 0x3a, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22, 0x60, 0xfa, 0xc5, 0xe5, 0x54, 0x2a, 0x77, 0x3a, 0xa4, 0x4f, 0xbc, 0xfe, 0xdf, 0x7c, 0x19, 0x3b, 0xc2, 0xc5, 0x99, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x17, 0x8a, 0xd, 0x5f, 0x30, 0x1b, 0xaf, 0x6c, 0xf3, 0xe1, 0xcd, 0x53, 0xd9, 0x86, 0x34, 0x37, 0x34, 0x5b, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0xf7, 0x4b, 0xa9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0xa2, 0x5c, 0x70, 0x39, 0x19, 0x2e, 0xe0, 0xd8, 0xa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc6, 0x7a, 0xff, 0x54, 0x1c, 0xec, 0x10, 0x86, 0xa2, 0x4e, 0xde, 0xf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x93, 0xd9, 0xfe, 0x33, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, tx.Input())
	assert.Equal(t, uint64(0x1dd855f4d2), tx.MaxFeePerGas())
	assert.Equal(t, uint64(0), tx.MaxPriorityFeePerGas())
	assert.Equal(t, uint64(0x8d89), tx.Nonce())
	assert.Equal(t, "68555783357316066790260158522522472943517667738000324034837093554525650710137", tx.R().String())
	assert.Equal(t, "31691185402001231564748799832019920297220739176092041616173081424518333340622", tx.S().String())
	assert.Equal(t, &types.Address{0xa5, 0x7b, 0xd0, 0x1, 0x34, 0xb2, 0x85, 0xb, 0x2a, 0x1c, 0x55, 0x86, 0xc, 0x9e, 0x9e, 0xa1, 0x0, 0xfd, 0xd6, 0xcf}, tx.To())
	assert.Equal(t, uint32(0x2), *tx.TransactionIndex())
	assert.Equal(t, "1", tx.V().String())
	assert.Equal(t, "0", tx.Value().String())
}

func TestUnknownFuncs(t *testing.T) {
	tx := spec.Transaction{}

	assert.Nil(t, tx.AccessList())
	assert.Panics(t, func() { tx.BlockHash() })
	assert.Panics(t, func() { tx.BlockNumber() })
	assert.Panics(t, func() { tx.From() })
	assert.Panics(t, func() { tx.Gas() })
	assert.Panics(t, func() { tx.GasPrice() })
	assert.Panics(t, func() { tx.Hash() })
	assert.Panics(t, func() { tx.Input() })
	assert.Equal(t, tx.MaxFeePerGas(), uint64(0))
	assert.Equal(t, tx.MaxPriorityFeePerGas(), uint64(0))
	assert.Panics(t, func() { tx.Nonce() })
	assert.Panics(t, func() { tx.R() })
	assert.Panics(t, func() { tx.S() })
	assert.Panics(t, func() { tx.To() })
	assert.Panics(t, func() { tx.TransactionIndex() })
	assert.Panics(t, func() { tx.V() })
	assert.Panics(t, func() { tx.Value() })
}
